declare var Pac: any;
declare var net: any;
declare var LRU: any;
declare var path: any;
declare var parseUrl: any;
declare var extend: any;
declare var parseQuery: any;
declare var lookup: any;
declare var Rules: any;
declare var values: any;
declare var util: any;
declare var logger: any;
declare var fileMgr: any;
declare var config: any;
declare var tplCache: any;
declare var rulesMgrCache: any;
declare var clientCerts: any;
declare var rules: any;
declare var tempRules: any;
declare var cachedPacs: {};
declare var RULES_HEADER: string;
declare var KV_HEADER: string;
declare var KEY_HEADER: string;
declare var HOST_HEADER: string;
declare var LOCALHOST: string;
declare var resolveReqRules: any;
declare var AUTH_RE: RegExp;
declare var dnsResolve: (host: any, callback: any) => any;
declare var PROXY_HOSTS_RE: RegExp;
declare var P_HOST_RE: RegExp;
declare function isProxyHost(req: any, proxy: any, host: any): any;
declare function isProxyEnable(req: any, name: any): any;
declare function isLineProp(rule: any, name: any): any;
declare function tpl(str: any, data: any): any;
declare function getScriptContext(req: any, res: any, body: any, pattern: any): any;
declare function getReqPayload(req: any, res: any, cb: any): any;
declare function execRulesScript(script: any, req: any, res: any, body: any, pattern: any): "" | {
    rules: any;
    values: any;
};
declare function handleDynamicRules(script: any, req: any, res: any, cb: any): void;
declare function resolveRulesFile(req: any, callback: any): void;
declare function initHeaderRules(req: any, needBodyFilters: any): void;
declare function initRules(req: any): any;
declare var HTTPS_RE: RegExp;
declare function checkCache(cacheKey: any, callback: any): true | undefined;
