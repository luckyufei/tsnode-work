declare var listenerCount: any;
declare var path: any;
declare var express: any;
declare var LRU: any;
declare var iconv: any;
declare var wsParser: any;
declare var http: any;
declare var https: any;
declare var extend: any;
declare var request: any;
declare var isUtf8: any;
declare var Storage: {
    new (): Storage;
    prototype: Storage;
};
declare var getServer: any;
declare var Buffer: any;
declare var parseUrl: any;
declare var hparser: any;
declare var transproto: any;
declare var common: any;
declare var getProxy: any;
declare var rootRequire: any;
declare var getEncodeTransform: any;
declare var getDecodeTransform: any;
declare var URL_RE: RegExp;
declare var HTTPS_RE: RegExp;
declare var MAX_BODY_SIZE: number;
declare var PING_INTERVAL: number;
declare var sessionStorage: Storage;
declare var createServer: any;
declare var httpRequest: any;
declare var httpsRequest: any;
declare var formatHeaders: any;
declare var getRawHeaderNames: any;
declare var getRawHeaders: any;
declare var STATUS_CODES: any;
declare var pluginName: any;
declare var TUNNEL_HOST_RE: RegExp;
declare var QUERY_RE: RegExp;
declare var REQ_ID_RE: RegExp;
declare var sessionOpts: any, sessionTimer: any, sessionPending: any;
declare var framesOpts: any, framesTimer: any, framesPending: any;
declare var customParserOpts: any, customParserTimer: any, customParserPending: any;
declare var reqCallbacks: {};
declare var resCallbacks: {};
declare var parserCallbacks: {};
declare var framesList: any;
declare var framesCallbacks: any;
declare var MAX_LENGTH: number;
declare var MAX_BUF_LEN: number;
declare var TIMEOUT: number;
declare var REQ_INTERVAL: number;
declare var pluginOpts: any, storage: any;
declare var pluginKeyMap: {};
declare var MASK_OPTIONS: {
    mask: boolean;
};
declare var BINARY_MASK_OPTIONS: {
    mask: boolean;
    binary: boolean;
};
declare var BINARY_OPTIONS: {
    binary: boolean;
};
declare var REQ_ID_KEY: string | symbol;
declare var SESSION_KEY: string | symbol;
declare var FRAME_KEY: string | symbol;
declare var REQ_KEY: string | symbol;
declare var CLOSED: string | symbol;
declare var NOT_NAME_RE: RegExp;
declare var index: number;
declare var pluginVersion: string;
declare var noop: () => void;
declare var certsCache: any;
declare var certsCallbacks: {};
declare var ctx: any;
declare var PLUGIN_HOOK_NAME_HEADER: any;
declare var GLOBAL_PLUGIN_VARS_HEAD: string;
declare var PLUGIN_VARS_HEAD: string;
declare var FROM_TUNNEL_HEADER: string;
declare var REMOTE_ADDR_HEAD: any;
declare var REMOTE_PORT_HEAD: any;
declare var SNI_TYPE_HEADER: any;
declare var PROXY_ID_HEADER: any;
declare var REQ_FROM_HEADER: any;
declare var debugMode: any;
declare var pluginInited: any;
declare var appendTrailers: (_res: any, res: any, newTrailers: any, req: any) => void;
declare var requestData: (options: any, callback: any) => void;
declare var getValue: (req: any, name: any) => string;
declare var setContext: (req: any) => void;
declare var initState: (req: any, name: any) => void;
declare var getFrameId: () => string;
declare var addFrame: (frame: any) => void;
declare var getFrameOpts: (opts: any) => {
    ignore?: undefined;
} | {
    ignore: boolean;
};
declare var pushFrame: (reqId: any, data: any, opts: any, isClient: any) => void;
declare var addParserApi: (req: any, conn: any, state: any, reqId: any) => void;
declare var addSessionStorage: (req: any, id: any) => void;
declare var ADDITIONAL_FIELDS: string[];
declare var initReq: (req: any, res: any, isServer: any) => void;
declare var getOptions: (opts: any, binary: any, toServer: any) => any;
declare var toBuffer: (base64: any) => any;
declare var getBuffer: (item: any) => any;
declare var getText: (item: any) => string;
declare var defineProps: (obj: any) => void;
declare var execCallback: (id: any, cbs: any, item: any) => void;
declare var retryRequestSession: (time: any) => void;
declare var requestSessions: () => void;
declare var retryRequestFrames: (time: any) => void;
declare var requestFrames: () => any;
declare var retryCustomParser: (time: any) => void;
declare var customParser: () => void;
declare function isFrames(item: any): any;
declare var getFrames: (req: any, cb: any) => any;
declare var getSession: (req: any, cb: any, isReq: any) => any;
declare var initWsReq: (req: any, res: any) => void;
declare var initConnectReq: (req: any, res: any) => void;
declare var loadModule: (filepath: any) => any;
declare function getFunction(fn: any): any;
declare function notEmptyStr(str: any): any;
declare function getHookName(req: any): string | null;
declare function handleError(socket: any, sender: any, receiver: any): void;
declare function toBinary(data: any): any;
declare function wrapTunnelWriter(socket: any, toServer: any): any;
declare function wrapTunnelReader(socket: any, fromServer: any, maxPayload: any): any;
declare function setReqRules(uri: any, reqRules: any): void;
declare function addFrameHandler(req: any, socket: any, maxWsPayload: any, fromClient: any, toServer: any): void | {
    receiver: any;
    sender: any;
};
declare function extractHeaders(req: any, exlucdekyes: any): {};
declare function addErrorHandler(req: any, client: any): void;
declare function handleWsSignal(receiver: any, sender: any): void;
declare function destroySocket(this: any): void;
