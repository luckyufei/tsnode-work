declare var path: any;
declare var p: any;
declare var fs: any;
declare var fse: any;
declare var http: any;
declare var LRU: any;
declare var extend: any;
declare var EventEmitter: any;
declare var pluginMgr: any;
declare var colors: any;
declare var util: any;
declare var logger: any;
declare var pluginUtil: any;
declare var config: any;
declare var getPluginsSync: any;
declare var getPlugin: any;
declare var rulesMgr: any;
declare var RulesMgr: any;
declare var properties: any;
declare var httpMgr: any;
declare var protocols: any;
declare var encodeURIComponent: any;
declare var REMOTE_RULES_RE: RegExp;
declare var PLUGIN_MAIN: any;
declare var PIPE_PLUGIN_RE: RegExp;
declare var RULE_VALUE_HEADER: string;
declare var SNI_VALUE_HEADER: string;
declare var GLOBAL_PLUGIN_VARS_HEAD: string;
declare var PLUGIN_VARS_HEAD: string;
declare var RULE_URL_HEADER: string;
declare var ETAG_HEADER: string;
declare var MAX_AGE_HEADER: string;
declare var FULL_URL_HEADER: string;
declare var REAL_URL_HEADER: string;
declare var RELATIVE_URL_HEADER: string;
declare var EXTRA_URL_HEADER: string;
declare var UI_REQUEST_HEADER: string;
declare var REQ_ID_HEADER: string;
declare var PIPE_VALUE_HEADER: string;
declare var CUSTOM_PARSER_HEADER: string;
declare var STATUS_CODE_HEADER: string;
declare var PLUGIN_REQUEST_HEADER: string;
declare var LOCAL_HOST_HEADER: string;
declare var PROXY_VALUE_HEADER: string;
declare var PAC_VALUE_HEADER: string;
declare var METHOD_HEADER: string;
declare var SHOW_LOGIN_BOX: string;
declare var FROM_TUNNEL_HEADER: string;
declare var CLIENT_PORT_HEAD: any;
declare var HOST_IP_HEADER: string;
declare var GLOBAL_VALUE_HEAD: string;
declare var SERVER_NAME_HEAD: string;
declare var COMMON_NAME_HEAD: string;
declare var CERT_CACHE_INFO: string;
declare var STATUS_ERR: Error;
declare var INTERVAL: number;
declare var CHECK_INTERVAL: number;
declare var MAX_CERT_SIZE: number;
declare var portsField: string | symbol;
declare var UTF8_OPTIONS: {
    encoding: string;
};
declare var notLoadPlugins: any;
declare var allPlugins: any;
declare var authPlugins: any;
declare var tunnelKeys: any;
declare var LOCALHOST: string;
declare var MAX_RULES_LENGTH: number;
declare var rulesCache: any;
declare var CUSTOM_CERT_HEADER: any;
declare var ENABLE_CAPTURE_HEADER: any;
declare var PLUGIN_HOOKS: any;
declare var PLUGIN_HOOK_NAME_HEADER: any;
declare var HTTP_RE: RegExp;
declare var conf: {};
declare var EXCLUDE_CONF_KEYS: {
    uid: number;
    INTERNAL_ID: number;
    SNI_PLUGIN_HEADER: number;
    WEBUI_HEAD: number;
    CLIENT_INFO_HEAD: number;
    COMPOSER_CLIENT_ID_HEADER: number;
    TEMP_TUNNEL_DATA_HEADER: number;
};
declare var EXCLUDE_NAMES: {
    password: number;
    shadowRules: number;
    rules: number;
    values: number;
};
declare var debugMode: any;
declare var whistleProxy: any;
declare var pluginHostMap: any;
declare var pluginHosts: {};
declare function updateRules(): void;
declare function showVerbose(oldData: any, newData: any): void;
declare function readReqRules(dir: any, callback: any): void;
declare function readJson(pkgPath: any, callback: any): void;
declare function readPackages(obj: any, callback: any): void;
declare function checkUpdate(pluginNames: any): void;
declare function addRealUrl(req: any, newHeaders: any): void;
declare function addPluginVars(req: any, headers: any, rule: any): void;
declare function addPluginHeaders(req: any, headers: any, isKey: any): any;
declare function addRuleHeaders(req: any, rules: any, headers: any, isPipe: any): any;
declare function pluginIsDisabled(name: any): any;
declare function _getPlugin(protocol: any): any;
declare function getActivePluginByName(name: any): any;
declare function getPluginByName(name: any): any;
declare function getPluginByRuleUrl(ruleUrl: any): any;
declare function _loadPlugins(plugins: any, callback: any): void;
declare function loadPlugins(plugins: any, callback: any): void;
declare function parseRulesList(req: any, results: any, isResRules: any): any;
declare function getPluginReqOpts(item: any, req: any, options: any, port: any): any;
declare function authReq(isReq: any, ports: any, req: any, options: any, callback: any): any;
declare function getRulesFromPlugins(type: any, req: any, res: any, callback: any): void;
declare function getOptions(req: any, res: any, type: any, isPipe: any): any;
declare function requestPlugin(options: any, callback: any, retryCount: any): void;
declare function requestRules(options: any, callback: any): void;
declare function rulesToJson(body: any): {
    root: any;
    text: any;
    values: any;
} | undefined;
declare function emptyFilter(val: any): boolean;
declare function getRulesMgr(type: any, req: any, res: any, callback: any): any;
declare function getPluginRulesCallback(req: any, callback: any): (pluginRules: any) => void;
declare function resolvePipePlugin(req: any, callback: any): void;
declare function getPipe(type: any, hookName: any): (req: any, res: any, callback: any) => void;
declare var getWsReqReadPipe: (req: any, res: any, callback: any) => void;
declare var getWsReqWritePipe: (req: any, res: any, callback: any) => void;
declare var getWsResReadPipe: (req: any, res: any, callback: any) => void;
declare var getWsResWritePipe: (req: any, res: any, callback: any) => void;
declare var getTunnelReqReadPipe: (req: any, res: any, callback: any) => void;
declare var getTunnelReqWritePipe: (req: any, res: any, callback: any) => void;
declare var getTunnelResReadPipe: (req: any, res: any, callback: any) => void;
declare var getTunnelResWritePipe: (req: any, res: any, callback: any) => void;
declare function postStats(req: any, res: any): void;
declare var PLUGIN_RULE_RE: RegExp;
declare var PLUGIN_RULE_RE2: RegExp;
declare var PLUGIN_RE: RegExp;
declare function getPluginByPluginRule(pluginRule: any): any;
declare function resolveWhistlePlugins(req: any): any;
declare var PLUGIN_KEY_RE: RegExp;
declare var MAX_VALUE_LEN: number;
declare function requestValue(options: any, callback: any, isBin: any): any;
