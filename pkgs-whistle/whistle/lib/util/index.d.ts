/// <reference types="node" />
export var PLUGIN_VALUES: string | symbol;
export var PLUGIN_MENU_CONFIG: string | symbol;
export var PLUGIN_INSPECTOR_CONFIG: string | symbol;
export var drain: (stream: any, endHandler: any) => any;
export var isWin: boolean;
export var WhistleTransform: typeof import("./whistle-transform");
export var ReplaceStringTransform: typeof import("./replace-string-transform");
export var SpeedTransform: typeof import("./speed-transform");
export var FileWriterTransform: typeof import("./file-writer-transform");
export var getServer: any;
export var listenerCount: typeof import("./patch").listenerCount;
export function parseRawJson(str: any): any;
export function setEstablished(socket: any): void;
export function isRegExp(regExp: any): boolean;
export function emitError(obj: any, err: any): void;
export var indexOfList: (buf: any, subBuf: any, start: any) => any;
export function startWithList(buf: any, subBuf: any, start: any): boolean;
export function endWithList(buf: any, subBuf: any, end: any): boolean;
export function getInternalHost(req: any, host: any): any;
export function toRegExp(regExp: any, ignoreCase: any): any;
export function setClientId(headers: any, enable: any, disable: any, clientIp: any, isInternalProxy: any): void;
export function getTunnelKey(conf: any): any;
export function removeClientId(headers: any): void;
export function encodeNonLatin1Char(str: any): any;
export function getQueryValue(value: any): any;
export function parseRuleJson(rules: any, callback: any, req: any): void;
export function getRuleValue(rules: any, callback: any, noBody: any, charset: any, isHtml: any, req: any): any;
export function getRuleFiles(rule: any, req: any): any[];
export function getRuleFile(rule: any): any;
export namespace rule {
    export { getMatcher };
    export { getUrl };
}
export function isWhistleTransformData(obj: any): boolean;
export function getClientPort(req: any): any;
export function isLocalPHost(req: any, isHttps: any): any;
export function parseLineProps(str: any): {} | undefined;
export function isIgnored(filter: any, name: any): any;
export function checkSkip(skip: any, rule: any, curUrl: any): boolean;
export function getCustomTab(tab: any, pluginName: any): {
    action: string;
    name: any;
} | undefined;
export function getPluginMenu(menus: any, pluginName: any): never[] | undefined;
export function getPluginVarsConf(conf: any): true | {
    hintUrl: any;
    hintList: undefined;
} | undefined;
export function getStaticDir(conf: any): string | undefined;
export function getReqId(): string;
export function getEmptyRes(): PassThrough;
export function deleteReqHeaders(req: any): void;
export function setReqCors(data: any, cors: any): void;
export function setResCors(data: any, cors: any, req: any): void;
export function disableReqProps(req: any): void;
export function disableResProps(req: any, headers: any): void;
export function setReqCookies(data: any, cookies: any, curCookies: any): void;
export function setResCookies(data: any, cookies: any): void;
export function escapeRegExp(str: any): any;
export function checkTlsError(err: any): boolean;
export function checkAuto2Http(req: any, ip: any, proxyUrl: any): any;
export function setProxyHost(req: any, options: any, reserve: any): any;
export function getHostIp(ip: any, port: any): any;
export function setResponseFor(rules: any, headers: any, req: any, serverIp: any): void;
export function getNoPluginServerMsg(rule: any): string;
export function getRemoteRules(apo: any, rulesUrl: any): any;
export function getParserStatus(req: any): string | undefined;
export function isInspect(enable: any): any;
export function parseRange(req: any, size: any): {
    start: any;
    end: number;
} | undefined;
export function parseClientInfo(req: any): any;
export function connect(options: any, callback: any): void;
export function checkPluginReqOnce(req: any, raw: any): any;
export function showPluginReq(req: any): any;
export function checkPort(port: any, host: any, cb: any): any;
export function getBoundIp(host: any, cb: any): any;
export function getPluginMenuConfig(conf: any): string;
export function getPluginInspectorConfig(conf: any): string;
export function isEnableH2(req: any): any;
export function isDisableH2(req: any, strict: any): any;
export function formatH2Headers(headers: any): {};
export function renderPluginRules(rules: any, pkg: any, simpleName: any): any;
export function setClientCert(options: any, key: any, cert: any, isPfx: any, cacheKey: any): void;
export function getStatusCodeFromRule(rules: any): {
    statusCode: any;
    headers: {};
} | undefined;
export function canGzip(req: any): boolean;
export function removeReqBody(req: any, data: any): void;
export function removeResBody(req: any, data: any): void;
export function getAuthByRules(rules: any): {
    username: any;
    password: any;
} | undefined;
export function getAuthBasic(auth: any): string | undefined;
export function delay(time: any, callback: any): void;
export function handleForwardedProps(req: any): void;
export function filterWeakRule(req: any): void;
export function setPluginMgr(p: any): void;
export function addTunnelData(socket: any, headers: any): void;
export function isInternalProxy(req: any): any;
export function checkProxyHost(proxy: any, host: any): boolean | undefined;
export var hasProtocol: typeof common.hasProtocol;
export var removeProtocol: typeof common.removeProtocol;
export var workerIndex: string | undefined;
import proc = require("./process");
export var INTERNAL_ID: string;
import isUtf8 = require("./is-utf8");
import ReplacePatternTransform = require("./replace-pattern-transform");
export var replacePattern: (replacement: any, args: any) => any;
import parseUrl = require("./parse-url");
import parseQuery = require("./parse-query");
export var localIpCache: any;
export var EMPTY_BUFFER: any;
export function noop(_: any): any;
export function isUrl(str: any): boolean;
export function isCiphersError(e: any): boolean;
export function getRegistry(pkg: any): any;
export function getLatestVersion(registry: any, cb: any): any;
export var hasBody: typeof common.hasBody;
export function changePort(url: any, port: any): any;
export function handleStatusCode(statusCode: any, headers: any): any;
export function getStatusCode(statusCode: any): any;
export function compare(v1: any, v2: any): 0 | 1 | -1;
export function execScriptSync(script: any, context: any): true | undefined;
export function getFileWriters(files: any, callback: any, force: any): void;
export var toBuffer: typeof fileMgr.toBuffer;
export function getErrorStack(err: any): string;
export function formatDate(now: any): any;
export function isOriginalRegExp(regExp: any): boolean;
export function toOriginalRegExp(regExp: any): any;
export function isEnable(req: any, name: any): any;
export function isAuthCapture(req: any): any;
export function isString(str: any): any;
export function getFullUrl(req: any): string;
export function disableCSP(headers: any): void;
export function getClientId(headers: any): any;
export function getComposerClientId(headers: any): any;
export function networkInterfaces(): NodeJS.Dict<os.NetworkInterfaceInfo[]>;
declare function getHostname(): string;
export function getProxyTunnelPath(req: any, isHttps: any): any;
export function isLocalAddress(address: any): any;
export function isLocalHost(host: any): any;
export function parseHost(host: any): any;
/**
 * 解析一些字符时，encodeURIComponent可能会抛异常，对这种字符不做任何处理
 * see: http://stackoverflow.com/questions/16868415/encodeuricomponent-throws-an-exception
 * @param ch
 * @returns
 */
declare function safeEncodeURIComponent(ch: any): any;
export function getPath(url: any, noProtocol: any): any;
export function getFilename(url: any): any;
export function disableReqCache(headers: any): void;
export function disableResStore(headers: any): void;
export function parsePathReplace(urlPath: any, params: any): any;
export function wrapResponse(res: any): PassThrough;
export function wrapGatewayError(body: any): PassThrough;
export function sendStatusCodeError(cltRes: any, svrRes: any): void;
export function parseJSON(data: any): any;
export function readFileSync(file: any): (globalThis.Buffer & string) | undefined;
export function trim(text: any): any;
export function readInjectFiles(data: any, callback: any): any;
export var lowerCaseify: (obj: any, rawNames: any) => {};
export function parseHeaders(headers: any, rawNames: any): {};
declare function getMatcher(rule: any, raw: any): any;
declare function getUrl(rule: any): any;
export function getMatcherValue(rule: any): any;
export function getUrlValue(rule: any, raw: any): any;
export function getRawType(data: any): string;
export function getContentType(contentType: any): "JS" | "CSS" | "HTML" | "JSON" | "XML" | "TEXT" | "IMG" | undefined;
export function supportHtmlTransform(res: any, req: any): boolean;
export function removeUnsupportsHeaders(headers: any, supportsDeflate: any): void;
export function hasRequestBody(req: any): boolean;
export function getContentEncoding(headers: any): any;
export function getZipStream(headers: any): zlib.Gzip | undefined;
export function getUnzipStream(headers: any): zlib.Gunzip | undefined;
export function getPipeIconvStream(headers: any): any;
export function toLowerCase(str: any): any;
export function toUpperCase(str: any): any;
export function getCharset(str: any): string | undefined;
export function getForwardedFor(headers: any): any;
export function getRemoteAddr(req: any): any;
export function getClientIp(req: any): any;
export function getRemotePort(req: any): any;
export var removeIPV6Prefix: typeof common.removeIPV6Prefix;
export function isUrlEncoded(req: any): boolean;
export function isJSONContent(req: any): boolean;
export function isProxyPort(proxyPort: any): boolean;
export function isMultipart(req: any): boolean;
export function getQueryString(url: any): any;
export function replaceQueryString(query: any, replaceQuery: any): any;
export function replaceUrlQueryString(url: any, queryString: any): any;
export function setHeaders(data: any, obj: any): any;
export function setHeader(data: any, name: any, value: any): any;
export function join(root: any, dir: any): any;
export function resolveProperties(list: any, result: any): any;
export function resolveFilter(ignore: any, filter: any): any;
export function exactIgnore(filter: any, rule: any): any;
export function ignoreRules(rules: any, ignore: any, isResRules: any): void;
export function filterRepeatPlugin(rule: any): void;
export function mergeRules(req: any, add: any, isResRules: any): any;
export function parseHeaderReplace(rule: any): string;
export function handleHeaderReplace(headers: any, opList: any): void;
export function transformReq(req: any, res: any, port: any, host: any): http.ClientRequest;
export function trimStr(str: any): string;
export function checkIfAddInterceptPolicy(proxyHeaders: any, headers: any): true | undefined;
export function getCgiUrl(url: any): any;
export function getString(str: any): any;
export function getHintList(conf: any, isVar: any): undefined;
export function toString(str: any): string;
export function onSocketEnd(socket: any, callback: any): void;
import PassThrough_1 = require("stream");
import PassThrough = PassThrough_1.PassThrough;
export function parseDeleteProperties(req: any): {
    reqHeaders: {};
    resHeaders: {};
    trailers: {};
};
export function getMethod(method: any): string;
export function isRulesContent(ctn: any): boolean;
export function isCustomParser(req: any): any;
export function getCipher(rules: any): any;
export function readOneChunk(stream: any, callback: any, timeout: any): any;
export function setTunnelHeaders(headers: any, remoteData: any): void;
import common = require("./common");
import fileMgr = require("./file-mgr");
import os = require("os");
import zlib = require("zlib");
import http = require("http");
export { setProtocol, getProtocol, replaceProtocol, proc, isUtf8, ReplacePatternTransform, parseUrl, request, parseQuery, isEmptyObject, addTrailerNames, removeIllegalTrailers, isHead, getUpdateUrl, getHostname as hostname, safeEncodeURIComponent as encodeURIComponent, decode as decodeBuffer, onResEnd };
